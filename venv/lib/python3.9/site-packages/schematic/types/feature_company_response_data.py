# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .company_detail_response_data import CompanyDetailResponseData
from .feature_detail_response_data import FeatureDetailResponseData
from .plan_response_data import PlanResponseData


class FeatureCompanyResponseData(pydantic_v1.BaseModel):
    access: bool = pydantic_v1.Field()
    """
    Whether further usage is permitted.
    """

    allocation: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The maximum amount of usage that is permitted; a null value indicates that unlimited usage is permitted.
    """

    company: typing.Optional[CompanyDetailResponseData] = None
    entitlement_id: str
    entitlement_type: str
    feature: typing.Optional[FeatureDetailResponseData] = None
    period: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The period over which usage is measured.
    """

    plan: typing.Optional[PlanResponseData] = None
    usage: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The amount of usage that has been consumed; a null value indicates that usage is not being measured.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
